import React, { useState, useEffect } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, AreaChart, Area, RadialBarChart, RadialBar, PieChart, Pie, Cell, BarChart, Bar } from 'recharts';
import { Plus, Target, TrendingDown, Calendar, Award, Zap, Heart, DollarSign, Clock, CheckCircle, AlertCircle, Coffee } from 'lucide-react';

const ZynRealTimeTracker = () => {
  const [startingAmount, setStartingAmount] = useState(12);
  const [taperWeeks, setTaperWeeks] = useState(8);
  const [dailyData, setDailyData] = useState({});
  const [currentDay, setCurrentDay] = useState(1);
  const [pricePerCan, setPricePerCan] = useState(6);
  const [pouchesPerCan, setPouchesPerCan] = useState(15);
  const [lastZynTime, setLastZynTime] = useState(null);

  // Get today's date as key
  const getTodayKey = () => new Date().toISOString().split('T')[0];
  
  // Get today's usage count
  const getTodayUsage = () => {
    const today = getTodayKey();
    return dailyData[today]?.usage || 0;
  };

  // Get today's timestamps
  const getTodayTimestamps = () => {
    const today = getTodayKey();
    return dailyData[today]?.timestamps || [];
  };

  // Generate dynamic taper plan
  const generateTaperPlan = () => {
    const plan = [];
    for (let week = 0; week < taperWeeks; week++) {
      const progress = week / (taperWeeks - 1);
      const weeklyGoal = Math.max(0, Math.round(startingAmount * (1 - progress)));
      plan.push({
        week: week + 1,
        goal: weeklyGoal,
        label: week === taperWeeks - 1 ? 'FREEDOM!' : `${weeklyGoal}/day`
      });
    }
    return plan;
  };

  const taperPlan = generateTaperPlan();

  const getCurrentGoal = () => {
    const currentWeek = Math.ceil(currentDay / 7);
    const week = taperPlan.find(w => w.week === currentWeek);
    return week ? week.goal : 0;
  };

  // Add a Zyn usage
  const addZyn = () => {
    const today = getTodayKey();
    const now = new Date();
    const timeString = now.toLocaleTimeString('en-US', { 
      hour: '2-digit', 
      minute: '2-digit',
      hour12: true 
    });

    setDailyData(prev => ({
      ...prev,
      [today]: {
        usage: (prev[today]?.usage || 0) + 1,
        timestamps: [...(prev[today]?.timestamps || []), timeString],
        goal: getCurrentGoal(),
        day: currentDay,
        date: today
      }
    }));

    setLastZynTime(now);
  };

  // Get time since last Zyn
  const getTimeSinceLastZyn = () => {
    if (!lastZynTime) return null;
    const now = new Date();
    const diffMs = now - lastZynTime;
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMins = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    
    if (diffHours > 0) {
      return `${diffHours}h ${diffMins}m`;
    }
    return `${diffMins}m`;
  };

  // Calculate stats from all daily data
  const getAllDaysData = () => {
    return Object.values(dailyData).sort((a, b) => new Date(a.date) - new Date(b.date));
  };

  const getSuccessRate = () => {
    const allDays = getAllDaysData();
    if (allDays.length === 0) return 0;
    const successful = allDays.filter(day => day.usage <= day.goal).length;
    return Math.round((successful / allDays.length) * 100);
  };

  const getDaysClean = () => {
    const allDays = getAllDaysData();
    let cleanDays = 0;
    for (let i = allDays.length - 1; i >= 0; i--) {
      if (allDays[i].usage === 0) {
        cleanDays++;
      } else {
        break;
      }
    }
    return cleanDays;
  };

  const getTotalSaved = () => {
    const allDays = getAllDaysData();
    const totalUsed = allDays.reduce((sum, day) => sum + day.usage, 0);
    const wouldHaveUsed = allDays.length * startingAmount;
    const savedPouches = wouldHaveUsed - totalUsed;
    return Math.max(0, (savedPouches / pouchesPerCan) * pricePerCan);
  };

  const getHealthBenefits = () => {
    const timeSince = getTimeSinceLastZyn();
    const daysClean = getDaysClean();
    
    if (daysClean >= 30) return "🫀 Heart rate normalized, circulation improved";
    if (daysClean >= 14) return "🧠 Reduced cravings, better sleep quality";
    if (daysClean >= 7) return "👅 Taste and smell improving";
    if (daysClean >= 3) return "🩸 Nicotine clearing from system";
    if (daysClean >= 1) return "💪 Beginning recovery process";
    if (timeSince && parseInt(timeSince) > 60) return "⏰ Great job staying strong!";
    return "🚀 Ready to start your journey";
  };

  // Progress calculation
  const todayUsage = getTodayUsage();
  const todayGoal = getCurrentGoal();
  const progressPercentage = todayGoal > 0 ? Math.min(100, (todayUsage / todayGoal) * 100) : 0;
  const isOverGoal = todayUsage > todayGoal;

  // Chart data
  const chartData = getAllDaysData().map((day, index) => ({
    day: index + 1,
    usage: day.usage,
    goal: day.goal,
    date: day.date
  }));

  const weeklyData = taperPlan.map(week => {
    const weekDays = getAllDaysData().filter(day => 
      Math.ceil((getAllDaysData().indexOf(day) + 1) / 7) === week.week
    );
    const avgUsage = weekDays.length > 0 
      ? weekDays.reduce((sum, day) => sum + day.usage, 0) / weekDays.length 
      : null;
    
    return {
      week: `W${week.week}`,
      goal: week.goal,
      actual: avgUsage ? Math.round(avgUsage * 10) / 10 : null,
      daysCompleted: weekDays.length
    };
  });

  // Today's usage pattern (hourly)
  const getTodayPattern = () => {
    const timestamps = getTodayTimestamps();
    const hourlyCount = {};
    
    timestamps.forEach(time => {
      const hour = parseInt(time.split(':')[0]);
      const period = time.includes('PM') ? 'PM' : 'AM';
      const hour24 = period === 'PM' && hour !== 12 ? hour + 12 : (period === 'AM' && hour === 12 ? 0 : hour);
      hourlyCount[hour24] = (hourlyCount[hour24] || 0) + 1;
    });

    return Array.from({length: 24}, (_, hour) => ({
      hour: hour === 0 ? '12AM' : hour < 12 ? `${hour}AM` : hour === 12 ? '12PM' : `${hour-12}PM`,
      count: hourlyCount[hour] || 0
    }));
  };

  const pieData = [
    { name: 'Success Days', value: getAllDaysData().filter(d => d.usage <= d.goal).length, color: '#10B981' },
    { name: 'Challenge Days', value: getAllDaysData().filter(d => d.usage > d.goal).length, color: '#EF4444' }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-6xl font-black text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-purple-400 mb-4">
            ZYN TRACKER
          </h1>
          <p className="text-xl text-gray-300">Real-time tracking • Every pouch counts</p>
        </div>

        {/* Main Tracking Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {/* Today's Counter */}
          <div className={`rounded-3xl p-8 shadow-2xl transition-all ${
            isOverGoal 
              ? 'bg-gradient-to-br from-red-600 to-pink-600' 
              : 'bg-gradient-to-br from-purple-600 to-blue-600'
          }`}>
            <div className="flex justify-between items-center mb-6">
              <div className="flex items-center space-x-3">
                <div className={`w-4 h-4 rounded-full animate-pulse ${isOverGoal ? 'bg-yellow-400' : 'bg-green-400'}`}></div>
                <span className="text-white text-2xl font-bold">Today</span>
              </div>
              <div className="flex items-center space-x-2 bg-white bg-opacity-20 rounded-full px-4 py-2">
                <Target className="w-5 h-5 text-white" />
                <span className="text-white font-semibold">Goal: {todayGoal}</span>
              </div>
            </div>
            
            <div className="text-center mb-8">
              <div className="text-9xl font-black text-white mb-4">{todayUsage}</div>
              <div className="text-white text-xl opacity-90 mb-6">Zyn pouches today</div>
              
              <div className="mb-6">
                <div className="w-full bg-white bg-opacity-20 rounded-full h-4 mb-2">
                  <div 
                    className={`h-4 rounded-full transition-all duration-500 ${
                      isOverGoal ? 'bg-yellow-400' : 'bg-green-400'
                    }`}
                    style={{width: `${Math.min(100, progressPercentage)}%`}}
                  ></div>
                </div>
                <div className="text-white text-sm opacity-75">
                  {isOverGoal 
                    ? `${todayUsage - todayGoal} over goal` 
                    : `${todayGoal - todayUsage} remaining`
                  }
                </div>
              </div>
              
              <button
                onClick={addZyn}
                className="bg-white text-purple-600 px-16 py-6 rounded-3xl font-black text-2xl hover:bg-gray-100 transition-all transform hover:scale-105 shadow-2xl"
              >
                <Coffee className="w-8 h-8 inline mr-3" />
                HAD ONE
              </button>
            </div>
          </div>

          {/* Stats & Time */}
          <div className="space-y-6">
            {/* Time Since Last */}
            <div className="bg-gradient-to-br from-orange-500 to-red-500 rounded-2xl p-6 shadow-xl">
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-white text-lg opacity-90">Time since last</div>
                  <div className="text-white text-3xl font-black">
                    {getTimeSinceLastZyn() || 'No data'}
                  </div>
                </div>
                <Clock className="w-12 h-12 text-white opacity-70" />
              </div>
            </div>

            {/* Quick Stats */}
            <div className="grid grid-cols-2 gap-4">
              <div className="bg-gradient-to-br from-green-500 to-emerald-600 rounded-2xl p-6 shadow-xl">
                <div className="flex items-center justify-between mb-2">
                  <CheckCircle className="w-8 h-8 text-white" />
                  <div className="text-3xl font-black text-white">{getSuccessRate()}%</div>
                </div>
                <div className="text-white opacity-90">Success Rate</div>
              </div>
              
              <div className="bg-gradient-to-br from-yellow-500 to-orange-500 rounded-2xl p-6 shadow-xl">
                <div className="flex items-center justify-between mb-2">
                  <Zap className="w-8 h-8 text-white" />
                  <div className="text-3xl font-black text-white">{getDaysClean()}</div>
                </div>
                <div className="text-white opacity-90">Days Clean</div>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="bg-gradient-to-br from-blue-500 to-indigo-600 rounded-2xl p-6 shadow-xl">
                <div className="flex items-center justify-between mb-2">
                  <DollarSign className="w-8 h-8 text-white" />
                  <div className="text-3xl font-black text-white">${getTotalSaved().toFixed(0)}</div>
                </div>
                <div className="text-white opacity-90">Saved</div>
              </div>
              
              <div className="bg-gradient-to-br from-pink-500 to-purple-600 rounded-2xl p-6 shadow-xl">
                <div className="flex items-center justify-between mb-2">
                  <Calendar className="w-8 h-8 text-white" />
                  <div className="text-3xl font-black text-white">{Object.keys(dailyData).length}</div>
                </div>
                <div className="text-white opacity-90">Days Tracked</div>
              </div>
            </div>
          </div>
        </div>

        {/* Today's Timeline */}
        {getTodayTimestamps().length > 0 && (
          <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-3xl p-8 mb-8 shadow-2xl">
            <h3 className="text-2xl font-bold text-white mb-6">Today's Timeline</h3>
            <div className="flex flex-wrap gap-3">
              {getTodayTimestamps().map((time, index) => (
                <div key={index} className="bg-white bg-opacity-20 rounded-full px-4 py-2">
                  <span className="text-white font-semibold">{time}</span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Health Benefits */}
        <div className="bg-gradient-to-r from-green-600 to-teal-600 rounded-3xl p-8 mb-8 shadow-2xl">
          <div className="flex items-center space-x-4 mb-4">
            <Heart className="w-10 h-10 text-white" />
            <h3 className="text-3xl font-bold text-white">Health Update</h3>
          </div>
          <p className="text-xl text-white opacity-90">{getHealthBenefits()}</p>
        </div>

        {/* Charts */}
        {chartData.length > 0 && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            {/* Daily Progress */}
            <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-3xl p-8 shadow-2xl">
              <h3 className="text-2xl font-bold text-white mb-6">Daily Progress</h3>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={chartData}>
                  <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.2)" />
                  <XAxis dataKey="day" stroke="white" />
                  <YAxis stroke="white" />
                  <Tooltip 
                    contentStyle={{ 
                      backgroundColor: 'rgba(0,0,0,0.8)', 
                      border: 'none', 
                      borderRadius: '10px',
                      color: 'white'
                    }} 
                  />
                  <Line type="monotone" dataKey="goal" stroke="#8884d8" strokeDasharray="5 5" strokeWidth={2} />
                  <Line type="monotone" dataKey="usage" stroke="#82ca9d" strokeWidth={3} />
                </LineChart>
              </ResponsiveContainer>
            </div>

            {/* Today's Hourly Pattern */}
            <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-3xl p-8 shadow-2xl">
              <h3 className="text-2xl font-bold text-white mb-6">Today's Pattern</h3>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={getTodayPattern()}>
                  <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.2)" />
                  <XAxis dataKey="hour" stroke="white" fontSize={12} />
                  <YAxis stroke="white" />
                  <Tooltip 
                    contentStyle={{ 
                      backgroundColor: 'rgba(0,0,0,0.8)', 
                      border: 'none', 
                      borderRadius: '10px',
                      color: 'white'
                    }} 
                  />
                  <Bar dataKey="count" fill="#82ca9d" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </div>
        )}

        {/* Settings */}
        <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-3xl p-8 mb-8 shadow-2xl">
          <h3 className="text-2xl font-bold text-white mb-6">Settings</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div>
              <label className="block text-white font-semibold mb-2">Starting Amount/Day</label>
              <input
                type="number"
                value={startingAmount}
                onChange={(e) => setStartingAmount(Math.max(1, parseInt(e.target.value) || 1))}
                className="w-full px-4 py-3 bg-white bg-opacity-20 border border-white border-opacity-30 rounded-xl text-white placeholder-white placeholder-opacity-70 focus:outline-none focus:ring-2 focus:ring-cyan-400"
                min="1"
              />
            </div>
            <div>
              <label className="block text-white font-semibold mb-2">Taper Weeks</label>
              <input
                type="number"
                value={taperWeeks}
                onChange={(e) => setTaperWeeks(Math.max(4, Math.min(16, parseInt(e.target.value) || 8)))}
                className="w-full px-4 py-3 bg-white bg-opacity-20 border border-white border-opacity-30 rounded-xl text-white placeholder-white placeholder-opacity-70 focus:outline-none focus:ring-2 focus:ring-cyan-400"
                min="4"
                max="16"
              />
            </div>
            <div>
              <label className="block text-white font-semibold mb-2">Price per Can ($)</label>
              <input
                type="number"
                step="0.01"
                value={pricePerCan}
                onChange={(e) => setPricePerCan(Math.max(0, parseFloat(e.target.value) || 0))}
                className="w-full px-4 py-3 bg-white bg-opacity-20 border border-white border-opacity-30 rounded-xl text-white placeholder-white placeholder-opacity-70 focus:outline-none focus:ring-2 focus:ring-cyan-400"
              />
            </div>
            <div>
              <label className="block text-white font-semibold mb-2">Pouches per Can</label>
              <input
                type="number"
                value={pouchesPerCan}
                onChange={(e) => setPouchesPerCan(Math.max(1, parseInt(e.target.value) || 15))}
                className="w-full px-4 py-3 bg-white bg-opacity-20 border border-white border-opacity-30 rounded-xl text-white placeholder-white placeholder-opacity-70 focus:outline-none focus:ring-2 focus:ring-cyan-400"
              />
            </div>
          </div>
        </div>

        {/* Taper Schedule */}
        <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-3xl p-8 shadow-2xl">
          <h3 className="text-2xl font-bold text-white mb-6">Taper Plan</h3>
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4">
            {taperPlan.map((week, index) => {
              const currentWeek = Math.ceil(currentDay / 7);
              const isActive = currentWeek === week.week;
              const isCompleted = currentWeek > week.week;
              
              return (
                <div
                  key={week.week}
                  className={`p-6 rounded-2xl text-center transition-all transform hover:scale-105 ${
                    isActive 
                      ? 'bg-gradient-to-br from-yellow-400 to-orange-500 shadow-2xl ring-4 ring-yellow-300' 
                      : isCompleted
                        ? 'bg-gradient-to-br from-green-500 to-emerald-600'
                        : 'bg-white bg-opacity-20'
                  }`}
                >
                  <div className="text-white font-bold mb-2">Week {week.week}</div>
                  <div className="text-3xl font-black text-white mb-2">{week.goal}</div>
                  <div className="text-white text-sm opacity-90">{week.label}</div>
                  {isCompleted && <CheckCircle className="w-6 h-6 text-white mx-auto mt-2" />}
                  {isActive && <Zap className="w-6 h-6 text-white mx-auto mt-2 animate-pulse" />}
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ZynRealTimeTracker;
